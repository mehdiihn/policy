---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

All projects must be documented using Markdown.  The documentation should include a clear project overview, technical specifications, API references, and a detailed explanation of the codebase.  All API calls must be documented with their respective endpoints, request parameters, and response formats.  The `policyNumber` field in the `Policy` model (`src/lib/models/Policy.ts`) must be handled correctly. The pre-save hook should reliably generate a **random** `policyNumber` for new policies using the `generateRandomPolicyNumber()` utility function. The pre-save hook should only run for new documents (`this.isNew`). Robust error handling should be implemented within the pre-save hook to catch and log any errors during policy number generation. The `policyNumber` field should remain `required: true`. The navbar should always be present on all screens and show relevant details regardless of login status. The dashboard and login screen should be as minimalistic as possible.  Version 1.23 (2025-05-24) - Updated documentation to reflect new minimalistic design for login, dashboard, and admin pages. Version 1.24 (2025-05-24) - Added documentation for admin user management page. Version 1.25 (2025-05-24) - Added documentation for admin sub-admin management page. Version 1.26 (2025-05-24) - Added documentation for user policy management page. Version 1.77 (2025-05-25) - All instances of "Insurance Policy" should be replaced with "Aviva Insurance Policy" to enhance SEO and branding. Version 1.27 (2025-05-24) - Added seed script documentation for creating initial admin, sub-admin, and user accounts with policies. Version 1.28 (2025-05-24) - Added seed script;  A seed script should be located at `scripts/seed.js`. Version 1.29 (2025-05-24) - Updated user dashboard design guidelines to reflect new design specifications. Version 1.30 (2025-05-24) - Updated user dashboard design to include rounded cards with smooth design using colors from the current palette. Version 1.31 (2025-05-24) - Added documentation to reflect new minimalistic design for login, dashboard, and admin pages. Version 1.32 (2025-05-24) - Added documentation for new API endpoint `/api/user/policies` to fetch user policies. Version 1.33 (2025-05-24) - Added documentation for new policy detail page `/user/policy/[id]`. Version 1.34 (2025-05-24) - Updated user dashboard design to match provided mobile app layout;  User dashboard should consist of nicely rounded cards with smooth design using colors from the current palette.  Version 1.35 (2025-05-24) - Updated API endpoints to use `userId` field instead of `user` field for policy queries. Version 1.36 (2025-05-25) - Use poppins font for everything. Version 1.37 (2025-05-25) - Updated documentation to reflect the use of Poppins font throughout the application. Version 1.38 (2025-05-25) - Added documentation for CarCheck.co.uk API integration.  All data from CarCheck.co.uk must be scraped. Version 1.39 (2025-05-25) - Added API endpoint `/api/car/[registration]` for fetching car data by registration.  Version 1.40 (2025-05-25) - Added documentation for new `/car-lookup` page demonstrating the car data lookup functionality. Version 1.41 (2025-05-25) - Added Car data model and scraper utility; When creating a user, the system should automatically fetch and populate car details if a registration number is provided. Version 1.42 (2025-05-25) - Updated admin and sub-admin policy creation pages to integrate car data lookup functionality.  When creating a user, the system should automatically fetch and populate car details if a registration number is provided.  The automatic population of car details should only occur when a registration number is provided during user creation. Version 1.43 (2025-05-25) - Updated scraping logic to handle variations in CarCheck.co.uk HTML structure. Version 1.44 (2025-05-25) - Added robust error handling to the car scraper. Version 1.45 (2025-05-25) - Improved scraping logic to handle variations in CarCheck.co.uk HTML structure and missing data more robustly.  When creating a user, the system should automatically fetch and populate car details if a registration number is provided during user creation. When creating a user, the system should automatically fetch and populate car details if a registration number is provided. Version 1.46 (2025-05-25) - Improved registration extraction logic to handle variations in CarCheck.co.uk HTML structure and missing data more robustly. The scraper now prioritizes extracting registration from `.app_top_plate` and falls back to `.kenteken` and text matching if necessary. Version 1.47 (2025-05-25) - Further improved registration extraction logic to handle edge cases and ensure registration is always extracted. When creating a new user, the system should automatically fetch and populate car details if a registration number is provided during user creation.  When creating a user, the system should automatically fetch and populate car details if a registration number is provided. Version 1.48 (2025-05-25) - Updated scraping logic to handle variations in CarCheck.co.uk HTML structure and missing data more robustly.  The scraper should handle cases where data is missing gracefully and return undefined for those fields. The scraper should include robust error handling to prevent crashes and provide helpful error messages. Version 1.49 (2025-05-25) - Updated scraping logic to extract make and year more reliably. Version 1.50 (2025-05-25) - Updated scraping logic to handle cases where data tables are missing from CarCheck.co.uk responses. The scraper will now attempt to extract data from the title and meta description if tables are not found. Version 1.51 (2025-05-25) - Updated scraping logic to extract make and model more reliably, even if tables are missing. When creating a user, the system should automatically fetch and populate car details if a registration number is provided.
Version 1.52 (2025-05-25) - Updated car scraping logic to use a more robust and reliable approach inspired by a provided Python script.  The new logic focuses on extracting key data points (make, model, color, year) from the CarCheck.co.uk website.  The existing `carScraper.ts` file will be updated to reflect these changes.
Version 1.53 (2025-05-25) - Updated `carScraper.ts` to use Cheerio for improved reliability and efficiency, removing the fetching logic as per user request.  The URL for scraping is now `https://www.carcheck.co.uk/Audi/{registration}`.
Version 1.54 (2025-05-25) - Updated admin policy creation page (`src/app/admin/create-policy/page.tsx`) to integrate car data lookup functionality using the new `/api/car/[registration]` endpoint.  Admin users should be able to automatically populate car details on the policy creation page by entering a registration number.
Version 1.55 (2025-05-25) - Updated sub-admin policy creation page (`src/app/sub-admin/create-policy/page.tsx`) to integrate car data lookup functionality using the new `/api/car/[registration]` endpoint. Sub-admin users should be able to automatically populate car details on the policy creation page by entering a registration number.  Users should be able to see their policies.  The user interface should display only the minimal vehicle information as defined in the seed script.  Admins can create sub-admins, users, edit policies, create policies, and have access to the full system, including deleting users (CRUD).  There should be a dedicated screen for creating new policies for selected users.  There should be a dedicated screen for creating new users with email and password fields, and the system should send an email with account details upon creation.  There should be a function to email policies to users as PDFs.  The system should have a streamlined workflow, eliminating duplicated screens. Sub-admins should only be able to edit the users they create. Version 1.56 (2025-05-25) - Added documentation for streamlined workflow and user policy display.  Investigate why newly created policies are not displayed. Version 1.57 (2025-05-25) -  Added documentation reflecting the need to investigate why newly created policies are not displayed in the user interface. Version 1.58 (2025-05-25) - Added documentation reflecting a streamlined workflow with dedicated screens for user creation and policy creation.  Admins can create sub-admins, users, edit policies, create policies, and have access to the full system, including deleting users (CRUD). Sub-admins can only edit the users they create.  Users can view their policies and a FAQ section has been added to the navbar.
Version 1.59 (2025-05-25) - Added dedicated screens for creating new users and policies for selected users, with streamlined workflow.  Email functionality for sending account details and policies as PDFs is implemented.  UI is updated to remove duplicated screens and buttons.  Sub-admins can only edit users they create.  FAQ section added to the user navbar.
Version 1.60 (2025-05-25) - Added documentation for admin policy view and edit pages.
Version 1.61 (2025-05-25) - Added admin policy detail and edit pages.
Version 1.62 (2025-05-25) - Added documentation for admin policy list page.
Version 1.63 (2025-05-25) - Updated policy creation pages to include only essential fields: Make, Model, Year, Color.  Additional fields will be manually added as needed.
Version 1.64 (2025-05-25) - Updated policy creation pages to only include essential fields: Make, Model, Year, Color, Power, Gearbox, Engine Capacity, Cylinders, Fuel Type, MOT Expiry, Tax Status, Tax Due.  Additional fields will be manually added as needed.
Version 1.65 (2025-05-25) - Updated admin user creation page to allow manual password input.
Version 1.66 (2025-05-25) - Added separate pages and forms for sub-admin creation and editing.
Version 1.67 (2025-05-25) - Removed phone number field from User model and sub-admin forms.
Version 1.68 (2025-05-25) - Updated admin user creation page to include the `role` field in the request body.
Version 1.69 (2025-05-25) - Updated admin user creation API endpoint to require a password and handle missing role field.
Version 1.70 (2025-05-25) - Added a universal logout button to the navbar, accessible to all users (admin, sub-admin, user).  The button is styled using destructive colors (red) for better visibility and follows standard UX conventions.
Version 1.71 (2025-05-25) -  User reported missing navbar on user pages.  Investigate and resolve.  Version 1.72 (2025-05-25) - Resolved missing navbar issue on user pages by incorporating `MobileHeader` and `MobileNav` components into `/user`, `/user/faq`, and `/user/policy/[id]` pages.  The `mobile-content` class was added to main sections for consistent mobile styling. The floating action button was removed from the `/user` page.
Version 1.73 (2025-05-25) - Replaced Nodemailer with Resend API for email functionality. Resend API key: `re_SRBpLp5M_DZ1HWnwRiQp4avaLQpXGQ56B`. Custom CSS styling for emails to match website aesthetics is implemented.
Version 1.74 (2025-05-25) - Updated email sending logic to use Resend API. Email templates are customized with CSS to match website aesthetics.
Version 1.75 (2025-05-25) -  Custom domain avivaflex.com will be used for email sending.
Version 1.76 (2025-05-25) - All references to "Insurance Policy" and "Policy" in documentation and UI should be changed to "Aviva Insurance Policy" for SEO and branding purposes.
Version 1.78 (2025-05-25) - Added a manually inputtable start date field to all policy creation forms.
Version 1.79 (2025-05-25) - All references to "Insurance Policy" and "Policy" have been updated to "Aviva Insurance Policy" to improve SEO and branding.  All policy creation forms now include a manually inputtable start date field.
Version 1.80 (2025-05-25) - User reported missing mobile navigation on certain pages.  Investigate and ensure `mobile-nav.tsx` is correctly integrated into all relevant pages.
Version 1.81 (2025-05-25) - Resolved duplicate `MobileNav` component issue on user pages (`/user`, `/user/faq`, and `/user/policy/[id]`).  The `MobileNav` component should only be rendered within the `AppLayout` component.
Version 1.82 (2025-05-25) - The `MobileNav` component in `AppLayout` should only display navigation relevant to the currently logged-in user's role.
Version 1.83 (2025-05-25) -  On the user page, replace the "Make a Claim" button with a "Profile" button that opens a bottom drawer displaying user details (Name, Address, Email, DOB).  The drawer should also include a "fake" invoice card showing premium paid amount and dates.
Version 1.84 (2025-05-25) - Added documentation for user profile drawer implementation.  The drawer should be implemented using a custom bottom drawer component, or by adapting an existing Dialog component.  The drawer should display user details (Name, Address, Email, DOB, Vehicle Registration) and a summary card with total premium paid, number of active policies, total policies, and details of the latest policy.
Version 1.85 (2025-05-25) - On the user page, the "Make a Claim" button should be replaced with a "Profile" button that opens a bottom drawer displaying user details (Name, Address, Email, DOB, Vehicle Registration) and a summary card showing total premium paid, number of active policies, total policies, and details of the latest policy.  The drawer should be implemented using a custom bottom drawer component, or by adapting an existing Dialog component.
Version 1.86 (2025-05-25) - Added Vehicle Registration to user profile drawer.  If vehicle registration is missing, display "To be added".  Added Vehicle Registration field to all policy creation/edit forms (admin and sub-admin).
Version 1.87 (2025-05-25) - Added a custom bottom drawer component using Radix UI Dialog primitives.  The drawer displays user details including vehicle registration (or "To be added" if missing). Vehicle registration field added to all policy creation/edit forms.
Version 1.88 (2025-05-25) - Vehicle registration should be sourced from policy data, not user data. If missing, display "To be added".
Version 1.89 (2025-05-25) -  Vehicle registration should be stored per policy, not per user.  The UI should reflect this change and accurately display the vehicle registration for each policy.  The "Will be added" message should only appear when the vehicle registration is truly missing from the policy's data.  All policy creation and editing forms must correctly save the vehicle registration to the policy's `vehicleInfo` object.  The API endpoints must be updated to reflect the change in data storage for vehicle registration.
Version 1.90 (2025-05-25) - Vehicle registration is now stored per policy, not per user.  The User model no longer contains a vehicleRegistration field. All API endpoints and forms have been updated to reflect this change.
Version 1.91 (2025-05-25) -  Even if the vehicle registration data is not provided during policy creation, the system should still allow the creation of the policy, with the vehicle registration field left blank or displaying "To be added" in the user interface.
Version 1.92 (2025-05-25) - Updated admin create policy for user page to allow manual entry of vehicle details even if the API lookup fails.  The system should allow policy creation even if vehicle registration data is not provided.  The vehicle registration field can be left blank or display "To be added" in the UI.  Separate fields should be used for vehicle registration lookup and policy vehicle registration.
Version 1.93 (2025-05-25) - Updated admin create policy for user page to allow manual entry of vehicle details even if the API lookup fails. Separate fields for vehicle registration lookup and policy saving are implemented in the admin policy edit page.
Version 1.94 (2025-05-25) -  In the admin policy edit page, separate fields are used for vehicle registration lookup and policy vehicle registration.  These fields are not synced; the lookup field is for searching and the other is for saving to the database for the specified policy.  If the vehicle registration data is not provided during policy creation, the system should still allow the creation of the policy, with the vehicle registration field left blank or displaying "To be added" in the user interface.
Version 1.95 (2025-05-25) - In the admin policy edit page, separate fields are used for vehicle registration lookup and policy vehicle registration.  These fields are not synced; the lookup field is for searching and the other is for saving to the database for the specified policy.  If the vehicle registration data is not provided during policy creation, the system should still allow the creation of the policy, with the vehicle registration field left blank or displaying "To be added" in the user interface.  A custom bottom drawer component (`src/components/ui/bottom-drawer.tsx`) has been implemented using Radix UI Dialog primitives. The drawer displays user details including vehicle registration (or "To be added" if missing).  All policy creation and editing forms correctly save vehicle registration to the policy's `vehicleInfo` object. API endpoints are updated.  The system should allow policy creation even if vehicle registration data is not provided.  The vehicle registration field can be left blank or display "To be added" in the UI.
Version 1.96 (2025-05-25) -  Added a custom bottom drawer component (`src/components/ui/bottom-drawer.tsx`) using Radix UI Dialog primitives. The drawer displays user details including vehicle registration (or "To be added" if missing).  All policy creation and editing forms correctly save vehicle registration to the policy's `vehicleInfo` object. API endpoints are updated. The system allows policy creation even if vehicle registration data is not provided. The vehicle registration field can be left blank or display "To be added" in the UI. The vehicle registration field in the admin policy edit page should not be automatically populated from the lookup field.  The two fields should be independent.  When editing a policy, if the vehicle registration is not provided, the interface should display "To be added".  If the vehicle registration data is not provided during policy creation, the system should still allow the creation of the policy, with the vehicle registration field left blank or displaying "To be added" in the user interface.
Version 1.97 (2025-05-25) - Added a custom bottom drawer component (`src/components/ui/bottom-drawer.tsx`). The drawer displays user details including vehicle registration (or "To be added" if missing). All policy creation and editing forms correctly save vehicle registration to the policy's `vehicleInfo` object. API endpoints are updated. The system allows policy creation even if vehicle registration data is not provided. The vehicle registration field can be left blank or display "To be added" in the UI. The vehicle registration field in the admin policy edit page is not automatically populated from the lookup field. The two fields are independent. When editing a policy, if the vehicle registration is not provided, the interface displays "To be added". If the vehicle registration data is not provided during policy creation, the system still allows policy creation, with the vehicle registration field left blank or displaying "To be added" in the UI.  The admin policy edit page now uses separate fields for vehicle registration lookup and policy vehicle registration.  These fields are not synced; the lookup field is for searching, and the other is for saving to the database for the specified policy.
Version 1.98 (2025-05-25) -  The `vehicleRegistration` field in the `vehicleInfo` object is now correctly saved to the database when editing policies.  The issue where the field was lost during the merge process has been resolved by using the `set` method to explicitly update the field.  All policy creation and editing forms now correctly save the `vehicleRegistration` field.  The user interface correctly displays the vehicle registration for each policy, or "To be added" if it's missing.
Version 1.99 (2025-05-25) - Updated admin policy edit page to use `findByIdAndUpdate` with `upsert: true` and `new: true` options to allow adding the `vehicleRegistration` field to existing policies in MongoDB.  The `strict: false` option is now used in the Mongoose schema to allow adding new fields to existing documents.
Version 2.00 (2025-05-25) - Added "Registered keeper" field to all policy forms and user profile drawer.  The `strict: false` option is used in the Mongoose schema to accommodate adding new fields to existing documents.  `findByIdAndUpdate` is used with `upsert: true` and `new: true` options to handle adding new fields to existing documents in MongoDB.
Version 2.01 (2025-05-25) - Updated `src/app/api/admin/policies/route.ts` to use `findByIdAndUpdate` with `upsert: true` and `new: true` options to correctly handle adding and updating the `vehicleRegistration` field in existing policies.  The `set` method is used to explicitly update individual fields, ensuring data integrity.
Version 2.02 (2025-05-25) - Updated `src/app/api/admin/policies/route.ts` to use `findByIdAndUpdate` with `upsert: true`, `new: true`, and `strict: false` options to correctly handle adding and updating the `vehicleRegistration` and `registeredKeeper` fields in existing policies. The `set` method is used to explicitly update individual fields, ensuring data integrity.
Version 2.03 (2025-05-25) - Updated user policy detail page (`src/app/user/policy/[id]/page.tsx`) to display the "Registered Keeper" field in the user profile drawer.
Version 2.04 (2025-05-25) - Updated admin policy detail page (`src/app/admin/policy/[id]/page.tsx`) to display vehicle registration and registered keeper from policy data, and added these fields to the "Basic Details" section of the Vehicle Information card.  The admin policy detail page now displays the correct data sources and includes the registered keeper field.
Version 2.05 (2025-05-25) - Updated sub-admin policy creation page to only include essential fields: Make, Model, Year, Colour, Registered Keeper. Additional fields will be added manually as needed.
Version 2.06 (2025-05-25) - Updated sub-admin policy detail page (`/sub-admin/policy/[id]`) and edit page (`/sub-admin/policy/[id]/edit`) to reflect the new data structure and UI changes, including the addition of the "Registered Keeper" field.  Sub-admins should only be able to view and edit policies they created.
Version 2.07 (2025-05-25) - Automated testing must be implemented and passed before merging any pull request.  All code must be thoroughly tested before deployment.
Version 2.08 (2025-05-25) - Added Jest and testing framework to the tech stack.
Version 2.09 (2025-05-25) - Added `@testing-library/react`, `@testing-library/jest-dom`, `@testing-library/user-event`, `jest-environment-jsdom`, `ts-jest`, `@types/jest`, `supertest`, and `mongodb-memory-server` to the tech stack for testing.
Version 2.10 (2025-05-25) -  All code must be thoroughly tested before deployment using the testing framework.  Login information from `scripts/seed.js` should be used to test authentication flows and other application functionalities.
Version 2.11 (2025-05-25) - Sub-admin policy edit page should have the same fields as the admin policy edit page.
Version 2.12 (2025-05-25) - Sub-admin policy edit page now has the same fields as the admin policy edit page.
Version 2.13 (2025-05-25) - Sub-admin policy edit page functionality should be restricted to policies created by the sub-admin.
Version 2.14 (2025-05-25) - Sub-admin policy creation page should match the admin create policy for user page but restricted to users created by the sub-admin.
Version 2.15 (2025-05-25) - Buttons should be responsive and arrange themselves in a 2x2 grid on smaller screens.
Version 2.16 (2025-05-25) - Address, date of birth, vehicle registration, and last four digits are required fields for user creation.
Version 2.17 (2025-05-26) - To delete Git config for a different account login, use `git config --global --unset` for global settings or `git config --local --unset` for local repository settings.  Then, re-add new credentials.
Version 2.18 (2025-05-26) -  Instructions on self-hosting on Coolify are needed.
Version 2.19 (2025-05-26) - Added Coolify deployment guide to documentation;  A `Dockerfile`, `.dockerignore`, and `docker-compose.yml` file are required for Coolify deployment.  See `COOLIFY_DEPLOYMENT.md` for details.
Version 2.20 (2025-05-26) - Added Dockerfile, .dockerignore, and docker-compose.yml files to the project.  These files are necessary for Coolify deployment.
Version 2.21 (2025-05-26) -  Added a `COOLIFY_DEPLOYMENT.md` file detailing the Coolify deployment process, including Dockerfile, .dockerignore, and docker-compose.yml configurations.  The internal MongoDB URL should be used in the Coolify environment variables.  Addressing ESLint errors during the build is crucial for successful deployment.
Version 2.22 (2025-05-26) -  Added a Dockerfile, .dockerignore, and docker-compose.yml file.  These files are required for Coolify deployment.  Addressing ESLint errors during the build process is crucial for successful deployment.  To quickly deploy, ESLint can be disabled in next.config.ts using `eslint: { ignoreDuringBuilds: true }`.
Version 2.23 (2025-05-26) - Updated next.config.ts to disable ESLint during builds to resolve deployment issues.  The internal MongoDB URL should be used in Coolify environment variables.  The custom domain avivaflex.com should be used for email sending, and the application should be deployed using HTTPS.  Cloudflare proxy settings should be checked to ensure they do not interfere with application functionality.
Version 2.24 (2025-05-26) - When using the "output: standalone" configuration in next.config.ts, the start command should be changed to "node .next/standalone/server.js" instead of "next start".
Version 2.25 (2025-05-26) - For Nixpacks deployments with Next.js standalone output, update the `package.json` start script to `node .next/standalone/server.js` or override the start command in Coolify to `node .next/standalone/server.js`.  Alternatively, remove the `output: "standalone"` configuration from `next.config.ts` to allow Nixpacks to handle optimization.
Version 2.26 (2025-05-26) - For Nixpacks deployments, the start command should be `next start`.  If using standalone output, remove the standalone configuration from `next.config.ts` to let Nixpacks handle optimization.
Version 2.27 (2025-05-26) - For successful deployment on Coolify using Nixpacks, ensure that the Cloudflare SSL/TLS settings are correctly configured to avoid conflicts with Coolify's SSL handling.  If issues persist, temporarily disable Cloudflare's SSL/TLS to isolate the problem.
Version 2.28 (2025-05-26) - For successful deployments on Coolify using Nixpacks, ensure that Cloudflare's SSL/TLS settings are correctly configured to avoid conflicts with Coolify's SSL handling. If issues persist, temporarily disable Cloudflare's SSL/TLS to isolate the problem.  If using Cloudflare, ensure that the proxy setting for the A records is set to "DNS only" to avoid conflicts.
Version 2.29 (2025-05-26) - For successful deployments on Coolify using Nixpacks, ensure that the Cloudflare proxy setting for the A records is set to "DNS only" to avoid conflicts with Coolify's reverse proxy. If using Cloudflare's SSL/TLS, ensure it is configured to avoid conflicts with Coolify's SSL handling, otherwise disable Cloudflare's SSL/TLS and let Coolify handle it.
Version 2.30 (2025-05-26) - For successful deployments on Coolify using Nixpacks, ensure that the Cloudflare proxy setting for the A records is set to "DNS only" to avoid conflicts with Coolify's reverse proxy. If using Cloudflare's SSL/TLS, ensure it's correctly configured to avoid conflicts with Coolify's SSL handling; otherwise, disable Cloudflare's SSL/TLS and let Coolify handle it. The start command should be `next start`.
Version 2.31 (2025-05-26) - For successful Coolify deployments using Nixpacks, ensure that the Cloudflare proxy setting for A records must be "DNS only" to avoid conflicts with Coolify's reverse proxy. If using Cloudflare's SSL/TLS, ensure correct configuration to avoid conflicts with Coolify's SSL handling, otherwise disable Cloudflare's SSL/TLS and let Coolify handle it. The start command should be `next start`.  If using a custom domain, ensure it is correctly configured in Coolify.  The internal MongoDB URL should be used in the Coolify environment variables, not a local .env file.
Version 2.32 (2025-05-26) -  For Nixpacks deployments, the start command should be `next start`.  If using a custom domain, ensure it is correctly configured in Coolify. The internal MongoDB URL should be used in the Coolify environment variables, not a local .env file.  If using Cloudflare, ensure that the proxy setting for the A records is set to "DNS only" to avoid conflicts with Coolify's reverse proxy.  If using Cloudflare's SSL/TLS, ensure it is correctly configured to avoid conflicts with Coolify's SSL handling, otherwise disable Cloudflare's SSL/TLS and let Coolify handle it.
Version 2.33 (2025-05-26) - For successful deployments on Coolify using Nixpacks, ensure that the Cloudflare proxy setting for the A records is set to "DNS only" to avoid conflicts with Coolify's reverse proxy.  If using Cloudflare's SSL/TLS, ensure correct configuration to avoid conflicts with Coolify's SSL handling, otherwise disable Cloudflare's SSL/TLS and let Coolify handle it. The start command should be `next start`.
Version 2.34 (2025-05-26) - For successful deployments, the `/api/setup` endpoint should be used to create the initial admin user.  The `credentials: 'include'` option must be used in fetch requests to handle cookies correctly.
Version 2.35 (2025-05-26) -  Added a `Dockerfile`, `.dockerignore`, and `docker-compose.yml` file.  These files are required for Coolify deployment. Addressing ESLint errors during the build is crucial for successful deployment.  The `/api/setup` endpoint should be used to create the initial admin user. The `credentials: 'include'` option must be used in fetch requests to handle cookies correctly.  The internal MongoDB URL should be used in the Coolify environment variables, not a local .env file.
Version 2.36 (2025-05-26) - For Nixpacks deployments, the start command should be `next start`. Using the `/api/setup` endpoint with `credentials: 'include'` is crucial for creating the initial admin user.  The internal MongoDB connection string should be used in the Coolify environment variables.  The custom domain `avivaflex.com` should be used for email sending, and the application should be deployed using HTTPS.  Correct Cloudflare proxy settings are crucial to avoid conflicts.
Version 2.37 (2025-05-26) - For successful deployments using Nixpacks, the start command should be `next start`. The `/api/setup` endpoint with `credentials: 'include'` is crucial for initial admin user creation. The internal MongoDB connection string should be used in Coolify environment variables. The custom domain `avivaflex.com` should be used for email sending, and HTTPS deployment is required.  Correct Cloudflare proxy settings are crucial to avoid conflicts.  The `credentials: 'include'` option must be used in all fetch requests involving authentication or data that requires session management.
Version 2.38 (2025-05-26) - The `/api/setup` endpoint should be used to create the initial admin user.  The `credentials: 'include'` option must be used in all fetch requests involving authentication or session management.  The correct admin credentials are `john.admin@insurance.com` and `admin123`, `sarah.admin@insurance.com` and `admin123`, or `michael.admin@insurance.com` and `admin123`.
Version 2.39 (2025-05-26) - For successful deployments on Coolify using Nixpacks, the `credentials: 'include'` option must